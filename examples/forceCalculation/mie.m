% Example force calculation script
%
% This script calculates the force for a spherical particle in a plane
% wave beam.  This is a good comparison with the FDTD force estimates.
%
% Part of ot-cpp-fdtd, Copyright 2020 Isaac Lenton
% See LICENSE for details about using/distributing this file.


% Ensure OTT is on Matlab's path

%% Simulation properties

index_medium = 1.0;
index_sphere = 1.59;

wavelength0 = 1064e-9;
wavelength_medium = wavelength0 ./ index_medium;
wavelength_sphere = wavelength0 ./ index_sphere;

%% Setup T-matrix for sphere

radius = 0.3*wavelength_medium;
Tmatrix = ott.TmatrixMie(radius, 'wavelength0', wavelength0, ...
    'index_medium', index_medium, 'index_particle', index_sphere);

%% Setup the beam

beam = ott.BscPlane(0, 0, 'Nmax', Tmatrix.Nmax(1), ...
  'wavelength0', wavelength0, 'index_medium', index_medium, ...
  'polarisation', [1, 0], 'omega', 2*pi*3e8/wavelength0);

%% Calculate forces

force = ott.forcetorque(beam, Tmatrix);
force = force ./ beam.speed();

disp(['OTT Force: ' num2str(force.')]);

%% Load FDTD output files, convert forces and display values

force3 = readData('surface_scat.dat');
force2 = readData('surface_total.dat');
force1 = readData('volume.dat');

% Calcuate converion factor (FDTD integral missing time step?)
sim_step_size = 6.2334e-17;
ucvf = 2*pi ./ sim_step_size;

% force1 and force2 estimate the force according to the difference
% between incoming and outgoing components of the field.
%
% For dielectrics, they are probably fine, for absorbing particles
% I would have more doubts.
disp(['FDTD Vol. Force: ' num2str(force1.*ucvf)]);
disp(['FDTD Surf. Tot. Force: ' num2str(force2.*ucvf)]);

% This just tells us how much light was scattered out of phase from
% the incident light, it seems like most of it was either scattered
% in a different direction or with a different phase.  (NO FORCE!)
disp(['FDTD Surf. Scat. Force: ' num2str(force3.*ucvf)]);

function output = readData(filename)

  % Auto-generated by MATLAB on 2020/04/09 16:41:30

  %% Initialize variables.
  delimiter = '\t';
  startRow = 2;

  %% Format for each line of text:
  %   column4: double (%f)
  %	column5: double (%f)
  %   column6: double (%f)
  % For more information, see the TEXTSCAN documentation.
  formatSpec = '%*s%*s%*s%f%f%f%[^\n\r]';

  %% Open the text file.
  fileID = fopen(filename,'r');

  %% Read columns of data according to the format.
  % This call is based on the structure of the file used to generate this
  % code. If an error occurs for a different file, try regenerating the code
  % from the Import Tool.
  dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, ...
    'TextType', 'string', 'HeaderLines' ,startRow-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');

  %% Close the text file.
  fclose(fileID);

  %% Post processing for unimportable data.
  % No unimportable data rules were applied during the import, so no post
  % processing code is included. To generate code which works for
  % unimportable data, select unimportable cells in a file and regenerate the
  % script.

  %% Create output variable
  output = cell2mat({dataArray{1:end-1}});

end
